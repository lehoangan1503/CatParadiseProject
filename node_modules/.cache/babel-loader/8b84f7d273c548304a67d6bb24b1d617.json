{"ast":null,"code":"var _jsxFileName = \"D:\\\\CatParadiseProject\\\\src\\\\components\\\\CatParadiseBody\\\\CaParadiseBody.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport CatCard from \"./CatCard/CatCard\";\nimport CatCountriesFilter from \"./CatCountriesFilter/CatCountriesFilter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CatParadiseBody = props => {\n  _s();\n\n  const [loadWithCountryFilterOut, setCountry] = useState(getCatCardList);\n\n  function findTotalCountries() {\n    let totalCountries = [{\n      country: \"All\",\n      catBreeds: 67\n    }];\n    props.catBreeds.forEach(cat => {\n      let addNewCountry = false;\n\n      for (let index = 0; index < totalCountries.length; index++) {\n        if (cat.origin === totalCountries[index].country) {\n          addNewCountry = false;\n          break;\n        }\n\n        addNewCountry = true;\n      }\n\n      if (addNewCountry === true) totalCountries.push({\n        country: cat.origin,\n        catBreeds: 0\n      });\n    });\n    return totalCountries;\n  }\n\n  function ascendingNumberCatBreedsOfCountry() {\n    const totalCountries = findTotalCountries();\n    props.catBreeds.forEach(cat => {\n      for (let index = 0; index < totalCountries.length; index++) {\n        if (cat.origin === totalCountries[index].country) {\n          totalCountries[index].catBreeds = totalCountries[index].catBreeds + 1;\n        }\n      }\n    });\n    const ascendingNumberCatBreedsOfCountry = totalCountries.sort((country1, country2) => {\n      return country1.catBreeds - country2.catBreeds;\n    });\n    return ascendingNumberCatBreedsOfCountry;\n  }\n\n  function loadCatCardWithFilter() {}\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cart-cards\",\n    children: [/*#__PURE__*/_jsxDEV(CatCountriesFilter, {\n      listCountries: ascendingNumberCatBreedsOfCountry(),\n      loadCatCardWithFilter: loadCatCardWithFilter()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), getCatCardList()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CatParadiseBody, \"u94x/wjSqanyGd6s/V9Vlew/fds=\");\n\n_c = CatParadiseBody;\nexport default CatParadiseBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"CatParadiseBody\");","map":{"version":3,"names":["React","useState","CatCard","CatCountriesFilter","CatParadiseBody","props","loadWithCountryFilterOut","setCountry","getCatCardList","findTotalCountries","totalCountries","country","catBreeds","forEach","cat","addNewCountry","index","length","origin","push","ascendingNumberCatBreedsOfCountry","sort","country1","country2","loadCatCardWithFilter"],"sources":["D:/CatParadiseProject/src/components/CatParadiseBody/CaParadiseBody.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport CatCard from \"./CatCard/CatCard\";\r\nimport CatCountriesFilter from \"./CatCountriesFilter/CatCountriesFilter\";\r\n\r\nconst CatParadiseBody = (props) => {\r\n  const [loadWithCountryFilterOut, setCountry] = useState(getCatCardList);\r\n\r\n  function findTotalCountries() {\r\n    let totalCountries = [{ country: \"All\", catBreeds: 67 }];\r\n    props.catBreeds.forEach((cat) => {\r\n      let addNewCountry = false;\r\n      for (let index = 0; index < totalCountries.length; index++) {\r\n        if (cat.origin === totalCountries[index].country) {\r\n          addNewCountry = false;\r\n          break;\r\n        }\r\n        addNewCountry = true;\r\n      }\r\n\r\n      if (addNewCountry === true)\r\n        totalCountries.push({ country: cat.origin, catBreeds: 0 });\r\n    });\r\n    return totalCountries;\r\n  }\r\n\r\n  function ascendingNumberCatBreedsOfCountry() {\r\n    const totalCountries = findTotalCountries();\r\n\r\n    props.catBreeds.forEach((cat) => {\r\n      for (let index = 0; index < totalCountries.length; index++) {\r\n        if (cat.origin === totalCountries[index].country) {\r\n          totalCountries[index].catBreeds = totalCountries[index].catBreeds + 1;\r\n        }\r\n      }\r\n    });\r\n    const ascendingNumberCatBreedsOfCountry = totalCountries.sort(\r\n      (country1, country2) => {\r\n        return country1.catBreeds - country2.catBreeds;\r\n      }\r\n    );\r\n    return ascendingNumberCatBreedsOfCountry;\r\n  }\r\n\r\n  \r\n  function loadCatCardWithFilter() {}\r\n  return (\r\n    <div className=\"cart-cards\">\r\n      <CatCountriesFilter\r\n        listCountries={ascendingNumberCatBreedsOfCountry()}\r\n        loadCatCardWithFilter={loadCatCardWithFilter()}\r\n      ></CatCountriesFilter>\r\n      {getCatCardList()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CatParadiseBody;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,kBAAP,MAA+B,yCAA/B;;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;EAAA;;EACjC,MAAM,CAACC,wBAAD,EAA2BC,UAA3B,IAAyCN,QAAQ,CAACO,cAAD,CAAvD;;EAEA,SAASC,kBAAT,GAA8B;IAC5B,IAAIC,cAAc,GAAG,CAAC;MAAEC,OAAO,EAAE,KAAX;MAAkBC,SAAS,EAAE;IAA7B,CAAD,CAArB;IACAP,KAAK,CAACO,SAAN,CAAgBC,OAAhB,CAAyBC,GAAD,IAAS;MAC/B,IAAIC,aAAa,GAAG,KAApB;;MACA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGN,cAAc,CAACO,MAA3C,EAAmDD,KAAK,EAAxD,EAA4D;QAC1D,IAAIF,GAAG,CAACI,MAAJ,KAAeR,cAAc,CAACM,KAAD,CAAd,CAAsBL,OAAzC,EAAkD;UAChDI,aAAa,GAAG,KAAhB;UACA;QACD;;QACDA,aAAa,GAAG,IAAhB;MACD;;MAED,IAAIA,aAAa,KAAK,IAAtB,EACEL,cAAc,CAACS,IAAf,CAAoB;QAAER,OAAO,EAAEG,GAAG,CAACI,MAAf;QAAuBN,SAAS,EAAE;MAAlC,CAApB;IACH,CAZD;IAaA,OAAOF,cAAP;EACD;;EAED,SAASU,iCAAT,GAA6C;IAC3C,MAAMV,cAAc,GAAGD,kBAAkB,EAAzC;IAEAJ,KAAK,CAACO,SAAN,CAAgBC,OAAhB,CAAyBC,GAAD,IAAS;MAC/B,KAAK,IAAIE,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGN,cAAc,CAACO,MAA3C,EAAmDD,KAAK,EAAxD,EAA4D;QAC1D,IAAIF,GAAG,CAACI,MAAJ,KAAeR,cAAc,CAACM,KAAD,CAAd,CAAsBL,OAAzC,EAAkD;UAChDD,cAAc,CAACM,KAAD,CAAd,CAAsBJ,SAAtB,GAAkCF,cAAc,CAACM,KAAD,CAAd,CAAsBJ,SAAtB,GAAkC,CAApE;QACD;MACF;IACF,CAND;IAOA,MAAMQ,iCAAiC,GAAGV,cAAc,CAACW,IAAf,CACxC,CAACC,QAAD,EAAWC,QAAX,KAAwB;MACtB,OAAOD,QAAQ,CAACV,SAAT,GAAqBW,QAAQ,CAACX,SAArC;IACD,CAHuC,CAA1C;IAKA,OAAOQ,iCAAP;EACD;;EAGD,SAASI,qBAAT,GAAiC,CAAE;;EACnC,oBACE;IAAK,SAAS,EAAC,YAAf;IAAA,wBACE,QAAC,kBAAD;MACE,aAAa,EAAEJ,iCAAiC,EADlD;MAEE,qBAAqB,EAAEI,qBAAqB;IAF9C;MAAA;MAAA;MAAA;IAAA,QADF,EAKGhB,cAAc,EALjB;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AASD,CAlDD;;GAAMJ,e;;KAAAA,e;AAoDN,eAAeA,eAAf"},"metadata":{},"sourceType":"module"}