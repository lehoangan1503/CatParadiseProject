{"ast":null,"code":"var _jsxFileName = \"D:\\\\CatParadiseProject\\\\src\\\\components\\\\CatParadiseBody\\\\CaParadiseBody.js\";\nimport React from \"react\";\nimport CatCard from \"./CatCard/CatCard\";\nimport CatCountriesFilter from \"./CatCountriesFilter/CatCountriesFilter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CatParadiseBody = props => {\n  function findTotalCountries() {\n    let totalCountries = [\"country\"];\n    props.catBreeds.forEach(cat => {\n      let addNewCountry = false;\n\n      for (let index = 0; index < totalCountries.length; index++) {\n        if (cat.country_code === totalCountries[index]) {\n          addNewCountry = false;\n          break;\n        }\n\n        addNewCountry = true;\n      }\n\n      if (addNewCountry === true) totalCountries.push(cat.country_code);\n    });\n    return totalCountries;\n  }\n\n  function countCountryHaveCatBreeds() {\n    return this.findTotalCountries().length - 1;\n  }\n\n  function ascendingNumberCatBreedsOfCountry() {\n    const totalCountries = this.findTotalCountries();\n    const countriesObjArr = totalCountries.map(country => {\n      return {\n        country: country,\n        catBreeds: 0\n      };\n    });\n    this.props.catBreeds.forEach(cat => {\n      for (let index = 0; index < countriesObjArr.length; index++) {\n        if (cat.country_code === countriesObjArr[index].country) {\n          countriesObjArr[index].catBreeds = countriesObjArr[index].catBreeds + 1;\n        }\n      }\n    });\n    const ascendingNumberCatBreedsOfCountry = countriesObjArr.sort((country1, country2) => {\n      return country1.catBreeds - country2.catBreeds;\n    });\n    return ascendingNumberCatBreedsOfCountry;\n  }\n\n  function listAscendingNumberOfCatBreedsOfCountry() {\n    let arrOfAscending = this.ascendingNumberCatBreedsOfCountry();\n    let listCountriesAscending = arrOfAscending.map(country => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [country.country, \": \", country.catBreeds, \" cat breeds.\"]\n      }, country.country, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this);\n    });\n    return listCountriesAscending;\n  }\n\n  function getCatCardList() {\n    const {\n      catBreeds\n    } = props;\n    const catCardList = [];\n\n    for (let index = 0; index < catBreeds.length; index++) {\n      const {\n        image,\n        name,\n        origin,\n        temperament,\n        life_span,\n        weight,\n        description\n      } = catBreeds[index];\n      const cat = {\n        image,\n        name,\n        origin,\n        temperament,\n        life_span,\n        weight,\n        description\n      };\n\n      if (catBreeds[index].image !== undefined && catBreeds[index].image.id !== undefined) {\n        catCardList.push( /*#__PURE__*/_jsxDEV(CatCard, {\n          cat: cat\n        }, catBreeds[index].image.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this));\n      }\n    }\n\n    return catCardList;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cart-cards\",\n    children: [/*#__PURE__*/_jsxDEV(CatCountriesFilter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), getCatCardList()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n\n_c = CatParadiseBody;\nexport default CatParadiseBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"CatParadiseBody\");","map":{"version":3,"names":["React","CatCard","CatCountriesFilter","CatParadiseBody","props","findTotalCountries","totalCountries","catBreeds","forEach","cat","addNewCountry","index","length","country_code","push","countCountryHaveCatBreeds","ascendingNumberCatBreedsOfCountry","countriesObjArr","map","country","sort","country1","country2","listAscendingNumberOfCatBreedsOfCountry","arrOfAscending","listCountriesAscending","getCatCardList","catCardList","image","name","origin","temperament","life_span","weight","description","undefined","id"],"sources":["D:/CatParadiseProject/src/components/CatParadiseBody/CaParadiseBody.js"],"sourcesContent":["import React from \"react\";\r\nimport CatCard from \"./CatCard/CatCard\";\r\nimport CatCountriesFilter from \"./CatCountriesFilter/CatCountriesFilter\";\r\n\r\nconst CatParadiseBody = (props) => {\r\n  function findTotalCountries() {\r\n    let totalCountries = [\"country\"];\r\n    props.catBreeds.forEach((cat) => {\r\n      let addNewCountry = false;\r\n      for (let index = 0; index < totalCountries.length; index++) {\r\n        if (cat.country_code === totalCountries[index]) {\r\n          addNewCountry = false;\r\n          break;\r\n        }\r\n        addNewCountry = true;\r\n      }\r\n\r\n      if (addNewCountry === true) totalCountries.push(cat.country_code);\r\n    });\r\n    return totalCountries;\r\n  }\r\n  function countCountryHaveCatBreeds() {\r\n    return this.findTotalCountries().length - 1;\r\n  }\r\n\r\n  function ascendingNumberCatBreedsOfCountry() {\r\n    const totalCountries = this.findTotalCountries();\r\n\r\n    const countriesObjArr = totalCountries.map((country) => {\r\n      return { country: country, catBreeds: 0 };\r\n    });\r\n\r\n    this.props.catBreeds.forEach((cat) => {\r\n      for (let index = 0; index < countriesObjArr.length; index++) {\r\n        if (cat.country_code === countriesObjArr[index].country) {\r\n          countriesObjArr[index].catBreeds =\r\n            countriesObjArr[index].catBreeds + 1;\r\n        }\r\n      }\r\n    });\r\n    const ascendingNumberCatBreedsOfCountry = countriesObjArr.sort(\r\n      (country1, country2) => {\r\n        return country1.catBreeds - country2.catBreeds;\r\n      }\r\n    );\r\n    return ascendingNumberCatBreedsOfCountry;\r\n  }\r\n  function listAscendingNumberOfCatBreedsOfCountry() {\r\n    let arrOfAscending = this.ascendingNumberCatBreedsOfCountry();\r\n\r\n    let listCountriesAscending = arrOfAscending.map((country) => {\r\n      return (\r\n        <li key={country.country}>\r\n          {country.country}: {country.catBreeds} cat breeds.\r\n        </li>\r\n      );\r\n    });\r\n    return listCountriesAscending;\r\n  }\r\n  function getCatCardList() {\r\n    const { catBreeds } = props;\r\n\r\n    const catCardList = [];\r\n\r\n    for (let index = 0; index < catBreeds.length; index++) {\r\n      const {\r\n        image,\r\n        name,\r\n        origin,\r\n        temperament,\r\n        life_span,\r\n        weight,\r\n        description,\r\n      } = catBreeds[index];\r\n      const cat = {\r\n        image,\r\n        name,\r\n        origin,\r\n        temperament,\r\n        life_span,\r\n        weight,\r\n        description,\r\n      };\r\n      if (\r\n        catBreeds[index].image !== undefined &&\r\n        catBreeds[index].image.id !== undefined\r\n      ) {\r\n        catCardList.push(\r\n          <CatCard key={catBreeds[index].image.id} cat={cat}></CatCard>\r\n        );\r\n      }\r\n    }\r\n\r\n    return catCardList;\r\n  }\r\n  return (\r\n    <div className=\"cart-cards\">\r\n      <CatCountriesFilter></CatCountriesFilter>\r\n      {getCatCardList()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CatParadiseBody;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}